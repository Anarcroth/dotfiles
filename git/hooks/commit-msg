#!/usr/bin/env python
#
import re
import sys
import subprocess

WHITESPACE = "\\s+$"
PUNCTUATION = "^[,.;:!?]|[,.;:!?]$"


def validate_heading(heading, empty_line):
    print("Validating commit heading...")
    if not heading[0].isupper():  # check first character of first word of first line
        sys.exit("Commit message heading is not capitalized!")
    if re.search(WHITESPACE, heading):
        sys.exit("Commit message heading ends with whitespaces!")
    if re.search(PUNCTUATION, heading):
        sys.exit("Commit message heading has punctuation!")
    if len(heading) > 50:
        sys.exit("Commit message heading must not be longer than 50 characters! Yours was {}".format(len(heading)))
    if not empty_line == '':
        sys.exit("Commit message does not have empty line below heading!")
    print("Commit heading OK! [{} out of max 50]".format(len(heading)))


def validate_body(lines):
    print("Validating commit body...")
    if lines[0] == '':
        sys.exit("Commit message has more than one empty line below heading!")
    if not lines[0][0].isupper():  # check first character of first word of the body
        sys.exit("Commit message body is not capitalized!")
    for body_line in lines:
        if len(body_line) > 72:
            sys.exit("Commit message body is longer than 72 characters!")
        if re.search(WHITESPACE, body_line):
            sys.exit("Commit message body line ends with whitespaces!")
    print("Commit body OK!")


def validate(message):
    lines = message.splitlines()
    # Ignore commented lines
    lines = [x for x in lines if not re.match(r'^#', x)]
    heading = lines.pop(0)
    empty_line = lines.pop(0) if lines else ''
    try:
        # Basically if there is only a heading and then only empty lines
        if empty_line == '' and True not in [True for x in lines if x != '']:
            validate_heading(heading, empty_line)
        else:
            validate_heading(heading, empty_line)
            validate_body(lines)
    except SystemExit as se:
        print("Invalid commit message!\nThis was your commit message:\n")
        print(message)
        sys.exit(se)


def command_exists(cmd):
    return subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0


def spellchecker_exists():
    # Currently, it's difficult to support 'ispell', since it has quite verbose output, even with options '-a/-A'
    # thus checking it's results harder for this script. Don't get me wrong, I like a good challenge, but maybe for
    # a simple commit-msg hook it's not worth supporting 'ispell' as well.

    # Return the first found spellchecker. Priority is 'aspell', since it's considered the "best"
    if command_exists(["aspell", "-v"]):
        print("Found 'aspell' checker. Continuing...")
        return ["aspell", "list", "-l", "en"]
    elif command_exists(["spell", "--version"]):
        print("Fonud 'spell' checker. Continuing...")
        return ["spell"]
    else:
        return False
    return True


def spellcheck_commit(commit_file, spellchecker_cmd):
    print("Checking spelling...")
    spell_check = set(filter(None, subprocess.check_output(spellchecker_cmd, stdin=commit_file)
                             .decode("utf-8").split("\n")))
    if spell_check:
        print("#" * 37 + "\nCommit message has spelling mistakes!\n" + "#" * 37 + "\n")
        print("Misspelled words:")
        [print(str(indx + 1) + ": " + word) for indx, word in enumerate(spell_check) if word]
        cont = input("\nDo you want to continue? [Y/n] ")
        if cont == "y" or cont == "Y":
            print("Spelling OK!")
            return
        commit_file.seek(0)  # Hack so that you can read the file again after it has been read by the subprocess above
        print("\n" + "#" * 37 + "\nHere is the commit message you wrote!\n")
        print(commit_file.read())
        sys.exit("Spelling mistakes detected! Aborting commit message...")
    else:
        print("Spelling OK!")


def main():
    # Enable this so that this script can take input from the user (used in #spellcheck_commit method)
    sys.stdin = open("/dev/tty", "r")

    message_file = sys.argv[1]
    with open(message_file, 'r') as txt_file:
        cmd = spellchecker_exists()
        if cmd:
            spellcheck_commit(txt_file, cmd)
        # Reset file to read from the beginning, as in the previous method,
        # we issued a command that reads from the file ('aspell' in this case)
        txt_file.seek(0)
        validate(txt_file.read())


if __name__ == "__main__":
    main()

# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

# test "" = "$(grep '^Signed-off-by: ' "$1" |
# 	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
# 	echo >&2 Duplicate Signed-off-by lines.
# 	exit 1
# }
