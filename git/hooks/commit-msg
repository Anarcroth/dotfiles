#!/usr/bin/env python
#
import re
import sys
import subprocess

WHITESPACE = "\s+$"
PUNCTUATION = "^[,.;:!?]|[,.;:!?]$"

def validate_heading(heading, empty_line):
    print("Validating commit heading...")
    if not heading[0].isupper(): # check first character of first word of first line
        sys.exit("Commit message heading is not capitalized!")
    if re.search(WHITESPACE, heading):
        sys.exit("Commit message heading ends with whitespaces!")
    if re.search(PUNCTUATION, heading):
        sys.exit("Commit message heading has punctuation!")
    if len(heading) > 50:
        sys.exit("Commit message heading must not be longer than 50 characters! Yours was {}".format(len(heading)))
    if not empty_line == '':
        sys.exit("Commit message does not have empty line below heading!")
    print("Commit heading valid. [{} out of max 50]".format(len(heading)))


def validate_body(lines):
    print("Validating commit body...")
    if lines[0] == '':
        sys.exit("Commit message has more than one empty line below heading!")
    if not lines[0][0].isupper(): # check first character of first word of the body
        sys.exit("Commit message body is not capitalized!")
    for body_line in lines:
        if len(body_line) > 72:
            sys.exit("Commit message body is longer than 72 characters!")
        if re.search(WHITESPACE, body_line):
            sys.exit("Commit message body line ends with whitespaces!")
    print("Commit body valid.")


def validate(message):
    lines = message.splitlines()
    # Ignore commented lines
    lines = [x for x in lines if not re.match(r'^#', x)]
    heading = lines.pop(0)
    empty_line = lines.pop(0) if lines else ''
    try:
        # Basically if there is only a heading and then only empty lines
        if empty_line == '' and True not in [True for x in lines if x != '']:
            validate_heading(heading, empty_line)
        else:
            validate_heading(heading, empty_line)
            validate_body(lines)
    except SystemExit as se:
        print("Invalid commit message!\nThis was your commit message:\n")
        print(message)
        sys.exit(se)


def spellcheck_commit(commit_file):
    spell_check = subprocess.check_output(["aspell", "list", "-l", "en"], stdin=commit_file).decode("utf-8").split("\n")
    if spell_check:
        print("#" * 37 + "\nCommit message has spelling mistakes!\n" + "#" * 37 + "\n")
        print("Misspelled words:")
        [print(str(indx + 1) + ": " + word) for indx, word in enumerate(spell_check) if word]
        cont = input("\nDo you want to continue? [Y/n] ")
        if cont == "y" or cont == "Y":
            print("Spelling is OK!")
            return
        sys.exit("\nSpelling mistakes detected! Aborting commit message...")
    else:
        print("Spelling is OK!")


def main():
    # Enable this so that this script can take input from the user (used in #spellcheck_commit method)
    sys.stdin = open("/dev/tty", "r")

    message_file = sys.argv[1]
    try:
        txt_file = open(message_file, 'r')
        spellcheck_commit(txt_file)
        # Reset file to read from the beginning, as in the previous method,
        # we issued a command that reads from the file ('aspell' in this case)
        txt_file.seek(0)
        commit_message = txt_file.read()
    finally:
        txt_file.close()

    validate(commit_message)


if __name__ == "__main__":
    main()

# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
#SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
#grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

#test "" = "$(grep '^Signed-off-by: ' "$1" |
#	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
#	echo >&2 Duplicate Signed-off-by lines.
#	exit 1
#}
