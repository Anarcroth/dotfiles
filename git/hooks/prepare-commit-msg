#!/bin/bash
#
# This hook is called by "git commit" with the name of the
# file that has the commit message, followed by the description
# of the commit message's source.
#
# The hook's purpose is to edit the commit message file.
# If the hook fails with a non-zero status, the commit is aborted.
#
# This hook will:
# 1. Warn when you are about to commit to master
# 2. Warn when you are about to commit to develop
# 3. Warn when you are about to commit to a branch with a non-uniform name
# 4. Remove useless commit message comment

# Get pre-commit variables
source ~/dotfiles/git/hooks/git-hook-helper.sh
create_variables ~/dotfiles/git/hooks/git-hook-variables.yaml
commit_templ=$(cat ~/dotfiles/git/hooks/commit-msg-template)

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

if [[ -z "$COMMIT_SOURCE" ]]
then
    ref=$(git rev-parse --abbrev-ref HEAD)
    orig_msg=$(cat "$COMMIT_MSG_FILE")

    echo -e "$commit_templ" > $COMMIT_MSG_FILE

    # Warn on committing to master
    if [[ "$ref" == "master" ]]; then
	printf "$prepare_commit_warning_msg" "MASTER" >> $COMMIT_MSG_FILE

    # Warn on committing to develop
    elif [[ "$ref" == "dev" ]] || [[ "$ref" == "develop" ]]; then
	printf "$prepare_commit_warning_msg" "DEVELOP" >> $COMMIT_MSG_FILE

    # Warn on committing to non-uniform branch name
    elif ! [[ "$ref" =~ ^($prepare_commit_branch_prefixes)\/($prepare_commit_project_groups-[0-9]+).* ||
		  "$ref" =~ ^("release")\/(\d+\.\d+\.\d+)$ ]]; then
	printf "$prepare_commit_branch_warning" "$ref" >> $COMMIT_MSG_FILE
    fi

    echo -e "$orig_msg" >> $COMMIT_MSG_FILE

    # Remove useless commit message comment
    /usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
fi

# This will include the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# This adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.
#
# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
