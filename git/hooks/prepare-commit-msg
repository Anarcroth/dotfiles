#!/bin/bash
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

WARNING_MSG="\n!!!WARNING, YOU ARE COMMITTING TO '%s'\nARE YOU SURE YOU WANT TO DO THIS?!!!\n"
BRANCH_WARN="\n# Your branch name looks fishy.\n# '%s' does not conform to our usual standards.\n# Please fix it if needed.\n"

BRANCH_PREFIXES="(feature|bugfix|hotfix)"
PROJECT_GROUPS="(WFC|DPS|BBL|RMS|NBI)"

if [[ -z "$COMMIT_SOURCE" ]]
then
    ref=$(git rev-parse --abbrev-ref HEAD)
    orig_msg=$(cat "$COMMIT_MSG_FILE")

    commit_templ=$(cat `git rev-parse --git-dir`/hooks/commit-msg-template)
    echo -e "$commit_templ" > $COMMIT_MSG_FILE

    # Warn on committing to master
    if [[ "$ref" == "master" ]]; then
	printf "$WARNING_MSG" "MASTER" >> $COMMIT_MSG_FILE

    # Warn on committing to develop
    elif [[ "$ref" == "dev" ]] || [[ "$ref" == "develop" ]]; then
	printf "$WARNING_MSG" "DEVELOP" >> $COMMIT_MSG_FILE

    # Warn on committing to non-uniform branch name
    elif ! [[ "$ref" =~ ^($BRANCH_PREFIXES)\/($PROJECT_GROUPS-[0-9]+).* ]]; then
	printf "$BRANCH_WARN" "$ref" >> $COMMIT_MSG_FILE
    fi

    echo -e "$orig_msg" >> $COMMIT_MSG_FILE

    # Remove useless commit message comment
    /usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
fi

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
