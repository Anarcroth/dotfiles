#!/bin/bash

# Called by "git push" after it has checked the remote status,
# but before anything has been pushed.
# If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This hook will:
# 1. Stop pushing if the branch contains a WIP commit
# 2. Stop pushing if the push is going to be a force push to $protected_branches

# Get pre-push variables
source ~/dotfiles/git/hooks/git-hook-helper.sh
create_variables ~/dotfiles/git/hooks/git-hook-variables.yaml

BRANCH=`git rev-parse --abbrev-ref HEAD`
PUSH_COMMAND=`ps -ocommand= -p $PPID`
FORCE_PUSH="force|delete|-f"
WIP=$(git rev-list --grep '(WIP)' $pre_push_branch_to_compare...HEAD)

if [[ -n "$WIP" && "$BRANCH" =~ $pre_push_protected_branches ]]; then
    echo "Cannot push to protected branch $BRANCH with a WIP commit"
    exit 1
fi

if [[ "$BRANCH" =~ $pre_push_protected_branches && "$PUSH_COMMAND" =~ $FORCE_PUSH ]]; then
    echo "Pre-push stop! Cannot force-push to protected branch \"$BRANCH\"!"
    exit 1
fi

exit 0
